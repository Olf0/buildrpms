#!/bin/bash
set -u  # "-u" (error when using uninitialised variables).
# Must not use "-f" (disable pathname expansion) and
# "-C" (no-clobber / -overwrite) in this script.
# Omitted "-e" for now, because this script better runs through,
# despite minor errors.
set -o pipefail  # May not be supported, busybox's ash and bash do.
# Use bash (formally) because it is usually "always there" (e.g., on
# SailfishOS): Either the real bash or via busybox's bash-symlink (which is
# deployed by the busybox-symlinks-bash package).  Note that busybox's ash
# supports "-o pipefail", but not "-o posix"; setting POSIXLY_CORRECT seems to
# achive the same without compatibility issues, plus (when exported) also for a
# number of other GNU utilities.
# Nevertheless, this script is still a POSIX-compatible Bourne (not-"Again")
# Shell script and shall stay free of bashisms.
export LC_ALL=POSIX  # For details see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_02
export POSIXLY_CORRECT=1  # Can have side-effects, see e.g., https://github.com/Olf0/sfos-upgrade/issues/73
                          # Ultimately this ensures an almost consistent behaviour across shell implementations.

# Usage
# See detailed description below.

#        1         2         3         4         5         6         7         8
#2345678901234567890123456789012345678901234567890123456789012345678901234567890

# `buildrpms` takes a list of paths to tar archives (including simple file
# names, absolute, relative paths and homedir expansion by a leading tilde "~")
# with each list item (i.e., archive path) as a single argument.  Provided
# paths may point to files or directories; if a directory is addressed, the
# whole directory tree below this directory is searched for valid archive
# files.
#
# If an archive path contains no slashes (/), it is used as a simple archive
# file name; still the wildcard rules denoted below apply.  This name is used
# to search for valid archive files in a list of directories containing "." and
# "~/Downloads"; for each of these directories the whole directory tree below
# is searched.  The only exception are directories named "SOURCES", if the
# option "-i|--in-place" is used.
#
# Without the option "-i|--in-place", `buildrpms` avoids re-building archives
# for which an (S)RPM in the directories ./RPMS or ./SRPMS exists by analysing
# spec file content, the archive's top level directory and the archive name (in
# this order of precedence).
#
# The archive paths may either contain shell type wildcard characters
# (? * [ ]), or be truncated (i.e., provide only a path without unquoted
# wildcard characters, including or comprising the beginning of a archive file
# name or a complete such name).
# File paths ending in a slash are the only exception: They may contain
# wildcard characters, even though the whole directory tree below the provided
# path is searched for valid archive files.
#
# Control characters, which include all horizontal and vertical white spaces
# except for the simple space character, are not allowed in the provided
# archive paths.
#
# Mind to protect wildcards, the tilde and other special characters from being
# expanded by a shell, if `buildrpms` is intended to interpret them.
#
# Also mind, that `buildrpms` lastly calls `rpmbuild`, which expects the real
# archive file names to conform to "<name>-<version>.tar.gz" (i.e., the ones on
# mass-storage), unless `buildrpms`' option "-i|--in-place" is specified.
#
# `buildrpms` currently recognises the mutually exclusive options "-?|--help",
# "-i|--in-place", "-n|--no-move" and "-d|--debug".  By default `buildrpms`
# extracts the spec file of each archive found, processes it and moves each
# valid archive to the ./SOURCES directory; "-n|--no-move" links each valid
# archive in ./SOURCES instead of moving.  "-i|--in-place" omits extracting and
# processing of spec files and directly uses the archives at their original
# location.
# If no archive path list is provided, `buildrpms` will use an internal list of
# archive paths.
#
# `Buildrpms` outputs (to StdOUT) a the list of archive paths, with which
# ultimately `rpmbuild` is called after a multitude of checks.  All user
# oriented messages are directed to StdERR, except for the aforementioned
# archive paths and the help output.  The option "-d|--debug" provides some
# additional output to StdERR when processing the argument list.

# Exit codes:
#   0  Everything worked fine: all applicable checks, all applicable preparatory steps, and the rpmbuild run(s)
#   1  A check failed
#   2  Help called
#   3  Called incorrectly (e.g., with wrong parameters)
#   4  Aborted upon user request
#   5  Error while interacting with the OS (reading / writing from the filesystem, calling programs, etc.)
#   6  Error while executing one of the preparatory steps
#   7  Error internal to this script

# Notes
# Minimum requirements of RPM for %{name}-%{version} strings, according to
# https://rpm-software-management.github.io/rpm/manual/spec.html#preamble-tags
# [[:graph:]][[:graph:]]*-[[:alnum:]][[:alnum:].+_~^]*"
# This also covers %{name}-%{version}-%{release} strings, because
# "[[:graph:]]*" includes "-[[:alnum:]][[:alnum:].+_~^]*" and the
# requirements for %{release} are the same as for %{version}.
# My stronger, but usual requirements for %{name}-%{version} strings are
# "[[:alnum:]][-[:alnum:].+_~^]*-[[:digit:]][[:alnum:].+_~^]*" plus for
# -%{release} strings "-[[:alnum:]][[:alnum:].+_~^]*".


### Preamble

MyPWD="$PWD"

Called="$(basename "$0")"
if printf '%s' " $(id -un) $(id -Gn) " | fgrep -q ' root '
then
  printf '%s\n' "[Error] $Called shall not be started with root privileges: aborting!" >&2
  exit 3
fi

# Evaluating options
InPlace=N
NoMove=N
Debug=N
if [ $# -ge 1 ]
then
  case "$1" in
  -i|--in-place)
    InPlace=Y
    shift
    ;;
  -n|--no-move)
    NoMove=Y
    shift
    ;;
  -d|--debug)
    Debug=Y
    shift
    ;;
  -\?|--help)
    printf '%s\n' "Help text for $called is not yet written."
    exit 2
    ;;
  esac
fi

# LogFile
LogFile="${Called}.log.txt"
if ! touch "$LogFile"
then
  printf '%s\n' "[Error] Aborting: $Called failed to create its logfile!" >&2
  exit 5
fi
if ! printf '%s %s\n' "[Info] Starting $Called on" "$(date -Iseconds)" | tee "$LogFile" >&2
then printf '%s %s\n' "[Error] $Called failed to write to" "$LogFile"
fi


### Function(s)

list ( )
{
  List=""
  for i in "$@"  # "$@" cannot be copied as is (i.e., at="$@" does not work for copying), but handed down in function calls.
  do
    if printf '%s' "$i" | grep -q "[[:cntrl:]]"
    then
      printf '%s\n' "[Warning] Omitting argument \"${i}\", because it contains a control character!" | tee -a "$LogFile" >&2
      continue
    fi
    if printf '%s' "$i" | fgrep -q /
    then
      [ $Debug = Y ] && printf '%s %s\n' "[Debug] Looking up by path:" "$i" | tee -a "$LogFile" >&2
      k="${i%%/*}"
      if [ -z "$k" ]  # Starts with a "/"
      then m="${i#/}"
      elif [ -z "${k%%~*}" ]  # First path element starts with a "~"
      then                     # May allow for code-exec via embedded metacharacters (reserved characters) "| & ; ( ) newline"
        k="$(eval echo "$k")"  # or control operators (as token / word) "|| & && ; ;; ;& ;;& ( ) | |& <newline>".
        m="${i#*/}"
      elif [ "$k" = "." ]
      then
        k="$MyPWD"
        m="${i#*/}"
      else  # Path does start with something else than "/", "~*/" or "./"
        k="$MyPWD"
        m="$i"
      fi
      o="$k/$m"
      if p="$(printf '%s' "$o" | egrep -o '(^|[^\])(\\\\)*([*?]|\[[^/]+\])+.*$')"  # `grep` is "greedy" as always
      then k="${o%/*"${p#/}"}"  # See also https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13_03
      else k="${o%/*}"
      fi
      m="${o#"$k"/}"
      if [ -n "$p" ] || [ -n "${o##*/}" ]  # Does contain an unprotected * ? [ ] or does not end in "/"
      then  # Note that the way List is constructed (found no other way without copying instead of ap- or pre-pending the extant List each round, and without resorting to flaky `echo -e "\n"`), it contains a leading, empty line, but no concluding newline character.
        List="$List$(printf '\n%s' "$(find -L "${k:-/}" -type f \! -executable -size +64c -perm /444 -path "$k/$m" -print 2> /dev/null)")"
      else
        List="$List$(printf '\n%s' "$(find -L "${k:-/}" -type f \! -executable -size +64c -perm /444 -path "$k/${m}*" -print 2> /dev/null)")"
      fi
    else # Search for FileTargets
      [ $Debug = Y ] && printf '%s %s\n' "[Debug] Looking up by name:" "$i" | tee -a "$LogFile" >&2
      DDirs='~/Downloads ~/android_storage/Download'
      DDirs="$(eval echo "$DDirs")"  # Path expansion, here: tilde
      if [ "$InPlace" = Y ] || ! printf %s "${i##*-}" | grep -q '^[0-9]'
      then  # Note that the way List is constructed (found no other way without copying instead of ap- or pre-pending the extant List each round, and without resorting to flaky `echo -e "\n"`), it contains a leading, empty line, but no concluding newline character.
        List="$List$(printf '\n%s' "$(find -L $DDirs -type f \! -executable -size +64c -perm /444 -name "${i}*" -print 2> /dev/null)")"
        List="$List$(printf '\n%s' "$(find -L "$MyPWD" -path '*SOURCES' -prune -o -type f \! -executable -size +64c -perm /444 -name "${i}*" -print 2> /dev/null)")"
      else
        List="$List$(printf '\n%s' "$(find -L "$MyPWD" $DDirs -type f \! -executable -size +64c -perm /444 -name "${i}*" -print 2> /dev/null)")"
      fi
    fi
  done
  List="$(printf '%s\n' "$List" | fgrep -vx '' | sed 's|^\(.*\)/\([^/]*\)$|\2/\1|' | sort | sed 's|^\([^/]*\)/\(.*\)$|\2/\1|')"  # Fix-up of slightly malconstructed List, see comments above; sort result with filename as primary criterion.
  [ $Debug = Y ] && printf '%s\n%s\n' "[Debug] Complete list of expanded archive paths, before down-selecting them:" "$List" | tee -a "$LogFile" >&2
  return 0
}

# Observation: `printf` seems to always swallow an extant, trailing newline character, which can be re-added by appending '\n' to the format string, and command substitution via "$()" deletes _all_ trailing newline characters!

### Main script

# Translating arguments into a list of expanded paths
if [ $# = 0 ]
then list crypto-sdcard mount-sdcard sfos-upgrade buildrpms
else list "$@"
fi

if [ -z "$List" ]
then
  printf '%s\n' "[Warning] No archive files found: aborting!" | tee -a "$LogFile" >&2
  exit 1
fi

# Building the (S)RPMs
if [ "$InPlace" = Y ]
then
  printf '%s\n' "[Info] Processing in place:" | tee -a "$LogFile" >&2
else
  TmpDir="$(mktemp -dt "${Called}.XXX")"  # equivalent to `mktemp -dp "/tmp" "${Called}.XXX"`
  printf '%s\n' "[Info] Extracting and processing spec file from:" | tee -a "$LogFile" >&2
fi
k=1
kMax="$(printf '%s\n' "$List" | wc -l)"
j=""
nextI="$(printf '%s' "$List" | head -1)"  # Pick first entry
nextJ="${nextI##*/}"  # Equivalent to "$(basename "$nextI")"
while [ $k -le $kMax ]
do
  i="$nextI"
  j="${i##*/}"  # Equivalent to "$(basename "$i")"
  k=$((k+1))
  if [ $k -le $kMax ]
  then
    nextI="$(printf '%s' "$List" | sed -n "${k}p")"  # Pick k-th entry
    nextJ="${nextI##*/}"  # Equivalent to "$(basename "$nextI")"
  else
    nextI=""
    nextJ=""
  fi
  if ! file -b --mime-type "$i" | grep -q '^application/'  # Maybe also `file -bi "$i"`, but test may need to be omitted due to
  then continue                                            # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/file.html#tag_20_46_04
  fi
  if ! m="$(tar -tf "$i" 2> /dev/null)"
  then continue
  fi
  printf '%s. ' "$k" | tee -a "$LogFile" >&2
  if [ "$InPlace" = Y ]
  then
    o="$(printf '%s' "$m" | head -1)"  # E.g., "xz-5.0.4/", note the trailing slash
    p="${o%%/*}"
    if [ "$p" = rpm ] || [ "$p" = "$o" ]
    then p="$(printf %s "$j" | sed -e 's/\.[Tt][Gg][Zz]$//' -e 's/\.[Pp][Aa][Xx]$//' -e 's/\.[Uu][Ss][Tt][Aa][Rr]$//' -e 's/\.tar[.[:alnum:]]*$//')"
    fi
    case "$(find -L RPMS -maxdepth 2 -name "${p}*.[Rr][Pp][Mm]" -print | wc -w)_$(find -L SRPMS -maxdepth 1 -name "${p}*.[Ss]*[Rr][Pp][Mm]" -print | wc -w)" in
    0_0)
      printf '%s ' "Building RPM(s) & SRPM from archive" | tee -a "$LogFile" >&2
      printf '%s ' "$i" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -ta "$i" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      ;;
    0_*)
      printf '%s ' "Building RPM(s) (because the SRPM already exists) from archive" | tee -a "$LogFile" >&2
      printf '%s ' "$i" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -tb "$i" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      ;;
    *_0)
      printf '%s ' "Building SRPM (because an RPM for it already exists) from archive" | tee -a "$LogFile" >&2
      printf '%s ' "$i" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -ts "$i" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      ;;
    *_*)
      printf '%s ' "Building (because the SRPM & an RPM already exist) from archive" | tee -a "$LogFile" >&2
      printf '%s %s\n' "$i" "skipped!" | tee -a "$LogFile"
      ;;
    *)
      printf '%s ' "[Notice] Something went wrong when determining what to build (RPM and/or SRPM) from archive" | tee -a "$LogFile" >&2
      printf '%s %s\n' "$i" "skipped!" | tee -a "$LogFile"
      ;;
    esac
  else
    if o="$(printf '%s' "$m" | grep '\.spec$')"
    then
      if [ "$(printf '%s\n' "$o" | wc -l)" != 1 ]
      then
        printf '%s\n%s\n' "[Warning] Skipping archive \"${i}\", because more than a single spec file found in it:" "$o" | tee -a "$LogFile" >&2
        continue
      fi
    else
      printf '%s\n' "[Notice] Skipping archive \"${i}\", because no spec file found in it." | tee -a "$LogFile" >&2
      continue
    fi
    v="$(printf '%s' "$m" | grep -m 1 '\.rpmlintrc$')"  # The path to the rpmlintrc file within the archive
    w="${v##*/}"  # The simple name of the rpmlintrc file
    p="${o%%/*}"
    if [ "$p" = rpm ] || [ "$p" = "$o" ]
    then p="$(printf %s "$j" | sed -e 's/\.[Tt][Gg][Zz]$//' -e 's/\.[Pp][Aa][Xx]$//' -e 's/\.[Uu][Ss][Tt][Aa][Rr]$//' -e 's/\.tar[.[:alnum:]]*$//')"
    fi
    t="$TmpDir/$p"
    mkdir "$t"
    ln -s "$i" "${t}.lnk"  # Results in `ln -s <expanded path> "/tmp/buildrpms.XXX/$p.lnk"`
    cd "$t"
    if tar -xof "${t}.lnk" "$o"
    then
      cd "$MyPWD"
    else
      cd "$MyPWD"
      continue
    fi
    mkdir -p SOURCES
    sPre="$(sed -n '1,\_^[[:blank:]]*%prep$_P' "$t/$o" | sed -n '1,\_^[[:blank:]]*%prep[[:blank:]]*$_P' | sed -n '1,\_^[[:blank:]]*%prep[[:blank:]]*#_P')"
    sNam="$(printf %s "$sPre" | grep '^[[:blank:]]*Name:' | tail -1 | cut -s -d ':' -f 2 | cut -d '#' -f 1 | tr -d '[[:blank:]]' | grep -o '^[[:alnum:]][-+.[:alnum:]_~^]*')"
    sVer="$(printf %s "$sPre" | grep '^[[:blank:]]*Version:' | tail -1 | cut -s -d ':' -f 2 | cut -d '#' -f 1 | tr -d '[[:blank:]]' | grep -o '^[[:alnum:]][+.[:alnum:]_~^]*')"
    sRel="$(printf %s "$sPre" | grep '^[[:blank:]]*Release:' | tail -1 | cut -s -d ':' -f 2 | cut -d '#' -f 1 | tr -d '[[:blank:]]' | grep -o '^[[:alnum:]][+.[:alnum:]_~^]*')"
    if [ -n "$sNam" ] && [ -n "$sVer" ]
    then sNVR="${sNam}*-${sVer}*-${sRel}*"
    else sNVR="$p"
    fi
    if [ -n "$v" ]  # Path to .rpmlintrc file exists
    then
      cd "$t"
      if tar -xof "${t}.lnk" "$v"
      then 
        cd "$MyPWD"/SOURCES
        cp -sf "$t/$v" "$w"
        cd "$MyPWD"
      else
        cd "$MyPWD"
        printf %s "$sPre" | grep '^Source[0-9]*:.*\.rpmlintrc' && sed -i 's/\(^Source[0-9]*:.*\.rpmlintrc.*$\)/#\1/' "$t/$o"
      fi
    fi
    uIco=N  # RPM's "Icon:" tag handling
    if sIco="$(printf %s "$sPre" | grep '^[[:blank:]]*Icon:' | tail -1 | cut -s -d ':' -f 2 | cut -d '#' -f 1 | tr -d '[[:blank:]]' | grep -x '[[:alnum:]][+.[:alnum:]_~^]*\.[GgXx][IiPp][FfMm]')"
    then :  # Icon tag with path detected, fetch the path of the last hit
    elif sIco="$(printf %s "$sPre" | grep -m 1 '^#Icon:' | cut -s -d ':' -f 2 | cut -d '#' -f 1 | tr -d '[[:blank:]]' | grep -x '[[:alnum:]][+.[:alnum:]_~^]*.[GgXx][IiPp][FfMm]')"
    then  # Icon tag to uncomment with path detected; mind that only the first such tag is uncommented!
      uIco=Y
    fi
    tIco=""
    if [ -n "$sIco" ]
    then
      if [ -e "SOURCES/$sIco" ]
      then
        if [ -r "SOURCES/$sIco" ] && [ ! -d "SOURCES/$sIco" ] && [ -s "SOURCES/$sIco" ]
        then [ $uIco = Y ] && sed -i 's/^#Icon:/Icon:/' "$t/$o"
        else printf '%s' ", though notice that icon file referenced in spec file $o exists at SOURCES/${sIco}, but is not usable" | tee -a "$LogFile" >&2
        fi
      else
        if tIco="$(tar -tf "${t}.lnk" | fgrep "$sIco")"  # May have multiple hits
        then
          cd "$t"
          tar -xof "${t}.lnk" $tIco
          cd "$MyPWD"/SOURCES
          for h in $tIco
          do cp -sf "$t/$h" ./
          done
          cd "$MyPWD"
          [ $uIco = Y ] && sed -i 's/^#Icon:/Icon:/' "$t/$o"
        else printf '%s' ", though notice that icon file $sIco is referenced in spec file ${o}, but not found in archive $i" | tee -a "$LogFile" >&2
        fi
      fi
    fi
    Xrpm="$(find -L RPMS -maxdepth 2 -name "${sNVR}.[Rr][Pp][Mm]" -print)"  # May be a list
    Srpm="$(find -L SRPMS -maxdepth 1 -name "${sNVR}.[Ss]*[Rr][Pp][Mm]" -print)"  # May be a list
    if ! diff -q "$i" "SOURCES/${i##*/}" > /dev/null 2>&1  # Is exactly this file already there?
    then
      cd "$MyPWD"/SOURCES
      if [ "$NoMove" = Y ]
      then cp -sf "$i" ./
      else mv -f "$i" ./
      fi
      cd "$MyPWD"
      rm -f $Xrpm $Srpm
      Xrpm=""
      Srpm=""
    fi
    case "$(printf '%s' "$Xrpm" | wc -w)_$(printf '%s' "$Srpm" | wc -w)" in
    0_0)
      printf '%s ' "Building RPM(s) & SRPM from archive" | tee -a "$LogFile" >&2
      printf '%s ' "SOURCES/$j" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -ba "$t/$o" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      printf '\n' >> "$LogFile"
      ;;
    0_*)
      printf '%s ' "Building RPM(s) (because the SRPM already exists) from archive" | tee -a "$LogFile" >&2
      printf '%s ' "SOURCES/$j" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -bb "$t/$o" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      printf '\n' >> "$LogFile"
      ;;
    *_0)
      printf '%s ' "Building SRPM (because an RPM for it already exists) from archive" | tee -a "$LogFile" >&2
      printf '%s ' "SOURCES/$j" | tee -a "$LogFile"
      printf '\n\n' >> "$LogFile"
      if rpmbuild -v -bs "$t/$o" >> "$LogFile" 2>&1
      then
        printf '\n' >> "$LogFile"
        printf '%s' "succeeded." | tee -a "$LogFile" >&2
        printf '\n' | tee -a "$LogFile"
      else
        printf '\n' >> "$LogFile"
        printf '%s\n' "failed!" | tee -a "$LogFile"
      fi
      printf '\n' >> "$LogFile"
      ;;
    *_*)
      printf '%s ' "Building (because the SRPM & an RPM already exist) from archive" | tee -a "$LogFile" >&2
      printf '%s %s\n' "$i" "skipped!" | tee -a "$LogFile"
      printf '\n' >> "$LogFile"
      ;;
    *)
      printf '%s ' "[Notice] Something went wrong when determining what to build (RPM and/or SRPM) from archive" | tee -a "$LogFile" >&2
      printf '%s %s\n' "$i" "skipped!" | tee -a "$LogFile"
      printf '\n' >> "$LogFile"
      ;;
    esac
    cd SOURCES/
    rm -f "$w" $tIco
    cd "$MyPWD"
  fi
done
# rm -rf "$TmpDir"
exit 0
